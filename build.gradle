buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

apply from: 'build-tools/quality/checkstyle/checkstyle.gradle'
apply from: 'build-tools/quality/pmd/pmd.gradle'
apply from: 'build-tools/quality/findbugs/findbugs.gradle'
apply from: 'build-tools/quality/jacoco/jacoco.gradle'


group = projectGroup
version = projectVersion
sourceCompatibility = javaVersion

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    runtime('org.springframework.boot:spring-boot-devtools')

    compile("com.nimbusds:nimbus-jose-jwt:$nimbusJoseJwtVersion")

    compile("net.sf.dozer:dozer:$dozerVersion")

    compile("io.springfox:springfox-swagger2:$swaggerVersion")
    compile("io.springfox:springfox-swagger-ui:$swaggerUiVersion")

    compileOnly('org.projectlombok:lombok')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('org.hamcrest:hamcrest-library')

    integrationTestCompile('org.springframework.boot:spring-boot-starter-test')
    integrationTestCompile('org.springframework.security:spring-security-test')
}
